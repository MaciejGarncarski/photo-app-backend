datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  relationMode      = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken      String? @db.Text
  accessToken       String? @db.Text
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String? @db.Text
  sessionState      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
 id        String   @id
  sid       String   @unique
  data      String @db.Text
  expiresAt   DateTime
}

model User {
  id            String        @id @default(cuid())
  email         String?       @unique
  emailVerified DateTime?
  name          String?
  password      String?
  username      String?       @default(cuid())
  bio           String?
  image         String?
  customImage   String?
  role          Role          @default(USER)
  accounts      Account[]
  posts         Post[]
  postsLikes    PostLike[]
  postsComments PostComment[]
  fromUser      Follower[]    @relation("Follower")
  toUser        Follower[]    @relation("Following")
  createdAt     DateTime      @default(now()) @db.Timestamp(0)
  commentLike   CommentLike[]

  sentMessages     Message[] @relation("Sent")
  receivedMessages Message[] @relation("Received")

  sender   ChatRoom[] @relation("UserOne")
  receiver ChatRoom[] @relation("UserTwo")

  UserPreferences UserPreferences[]
}

enum Theme {
  DARK
  LIGHT
}

enum NotificationSound {
  ON
  OFF
}

model UserPreferences {
  userId String @id @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  theme Theme @default(LIGHT)
  notificationSound NotificationSound @default(ON)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id            Int           @id @default(autoincrement()) @db.Int
  author        User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId      String
  description   String        @db.MediumText
  createdAt     DateTime      @default(now()) @db.Timestamp(0)
  images        PostImage[]
  postsLikes    PostLike[]
  postsComments PostComment[]
  postSaved     SavedPost[]

  @@index([authorId])
}

model PostImage {
  id           Int    @id @default(autoincrement()) @db.Int
  fileId       String
  name         String
  url          String
  thumbnailUrl String
  width        Int
  height       Int
  size         Int
  post         Post?  @relation(fields: [postId], references: [id])
  postId       Int?   @db.Int

  @@index([postId])
}

model SavedPost {
  id     Int  @id @default(autoincrement()) @db.Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int  @db.Int

  @@index([postId])
}

model PostLike {
  id     Int    @id @default(autoincrement()) @db.Int
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int    @db.Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([postId])
  @@index([userId])
}

model PostComment {
  id          Int           @id @default(autoincrement()) @db.Int
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  post        Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      Int           @db.Int
  createdAt   DateTime      @default(now()) @db.Timestamp(0)
  text        String        @db.Text
  commentLike CommentLike[]

  @@index([userId])
  @@index([postId])
}

model CommentLike {
  id        Int         @id @default(autoincrement()) @db.Int
  comment   PostComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int         @db.Int
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@index([commentId])
  @@index([userId])
}

enum Role {
  USER
  ADMIN
}

model Follower {
  id        Int      @id @default(autoincrement()) @db.Int
  fromUser  User     @relation(fields: [from], references: [id], name: "Follower", onDelete: Cascade)
  from      String
  toUser    User     @relation(fields: [to], references: [id], name: "Following", onDelete: Cascade)
  to        String
  createdAt DateTime @default(now()) @db.Timestamp(0)

  @@index([to])
  @@index([from])
}

model ChatRoom {
  id         Int       @id @default(autoincrement()) @db.Int
  sender     User      @relation(fields: [senderId], references: [id], name: "UserOne", onDelete: Cascade)
  senderId   String
  userTwo    User      @relation(fields: [receiverId], references: [id], name: "UserTwo", onDelete: Cascade)
  receiverId String
  messages   Message[] @relation("Chatroom")

  @@index([senderId])
  @@index([receiverId])
}

model Message {
  id         String   @id @default(cuid())
  text       String
  senderId   String
  sender     User     @relation(fields: [senderId], references: [id], name: "Sent", onDelete: Cascade)
  receiverId String
  receiver   User     @relation(fields: [receiverId], references: [id], name: "Received", onDelete: Cascade)
  createdAt  DateTime @default(now()) @db.Timestamp(0)
  chatroom   ChatRoom @relation(fields: [chatroomId], references: [id], name: "Chatroom")
  chatroomId Int

  @@index([senderId])
  @@index([receiverId])
  @@index([chatroomId])
}
